#+TITLE: Array Langs Index
#+AUTHOR: Raimon Grau
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:nil
#+OPTIONS: e:t email:nil f:t inline:t p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t todo:t |:t
#+EXCLUDE_TAGS: noexport
#+KEYWORDS: bash zsh shell
#+LANGUAGE: en
#+SELECT_TAGS: export

#+OPTIONS: html-style:nil
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="styles.css"/>

#+OPTIONS: reveal_center:nil timestamp:nil
#+REVEAL_THEME: black

# toc:nil num:nil
* Generic
- https://gist.github.com/suhr/77f8d0acae5a2399cab950841cc99a05
- https://github.com/k-qy/notation
* APL
Good complete books:
- https://xpqz.github.io/learnapl/intro.html
- https://www.dyalog.com/mastering-dyalog-apl.htm
** papers
- https://dl.acm.org/doi/pdf/10.1145/800136.804488 A PROGRAMMING TECHNIQUE FOR NON-RECTANGULAR DATA
- https://dl.acm.org/doi/pdf/10.1145/390007.805361 APL THINKING FINDING ARRAY-ORIENTED SOLUTIONS
- https://dl.acm.org/doi/pdf/10.1145/800142.805327 A VISION OF PROBABILITY AND STATISTICS USING APL by linda alvord
- https://dl.acm.org/doi/pdf/10.1145/22415.22039 APL: A PROTOTYPING LANGUAGE

** https://news.ycombinator.com/item?id=15912241
I would compare Q (and other APL-related languages) to Vim
editor. There you have some carefully chosen operations which are easy
to perform. They don't take much efforts. They are also easy to
compose in useful ways - because the corresponding properties support
that. Since the basis of editing operations is fairly large, you have
many operations; but when you know many of them, you can work powerful
edits.


Lisp on the other hand is more like Emacs - naturally. Here we have a
small, carefully chosen orthogonal basis of abstract operations - not
domain-specific, but "theoretically-foundational" small basis. Then
you have a library of macros on top of that, and ability, of course,
to extend.

In other words, basis for APL is "classical" math, made executable and
expanded with mechanisms required to put in one line programming
constructs (logic, control flow, ordering...). It's harder to expand,
but you don't often need that. Lisp is a specific branch of math,
lambda calculus, which is provably enough to solve arbitrary
programming problem. The "inner core" of Lisp is also hard to expand,
but what you expand for your task is "the usage" of the language,
which is made to be straightforwardly expandable.

To me it's hard to say what is better.

* J
- https://zserge.com/posts/j/
- https://medium.com/@solarbreeze69/chatgpt-explains-arthur-whitneys-j-incunabulum-5be2ea69a298 chatgpt
* kap
- https://kapdemo.dhsdevelopments.com/
* shakti
- https://estradajke.github.io/k9-simples/k9/Tables.html
* K
The main implementation is private, but there are some opensource ones. ngn/k, kona and [[https://github.com/JohnEarnest/ok/][oK]] are the most complete
Very minimalistic. I read somewhere it's like a superpowered calculator.  It has around 20 builtins.
John Earnest talking about k versions: https://www.arraycast.com/episodes/episode41-john-earnest
** implementations
- https://ktye.github.io/
- ok
- https://web.archive.org/web/20200330134132/https://kparc.io/kc/ (k7)
- ngnk
- kona
** HN
- geocar
- https://news.ycombinator.com/item?id=8476113
- https://news.ycombinator.com/item?id=15907840
- https://news.ycombinator.com/item?id=15909001
- https://news.ycombinator.com/item?id=8475809
- https://news.ycombinator.com/item?id=8484916: K has interesting
  sequential goodies as well: over ("fold" in Lisp/Haskell, "reduce"
  in python), and scan (same, with all intermediate results returned
  as well). But it also has the unary ("monadic" in APL terminology)
  counterparts to these essentially binary operators, which I don't
  remember from Lisp or Haskell (but I'm neither a Lisper or a
  Haskellite, they probably are there somewhere..)
Unary over is the "fixed point"/"converge" adverb, which does

    x <- f(x) until x stabilizes (to within floating point tolerance
if it is a float), returns to its first value, or goes through a
requested number of iterations.  The best example of this that I can
think off is the K "flatten" idiom:

   ,// read: "concat over, converge". That is, given a general list,
it concatenates all its items promoting atoms to one-element lists -
thus, flattening one level of the list; And then applies it again and
again until there is no further change, thus flattening successive
levels of the list.  Is this the most efficient way to do this? No! in
fact, for an unbalanced one sided list it will do O(n^2) where n is
the number of items, with a best (and idiomatic Lisp/Haskell) solution
being O(n), although it's usually 100 chars rather than 3.

But the actual code orchestrated by these 3 chars behind the scenes is
all tight C loops, so for small n it will beat complex solutions. And
it is all of 3 self-describing, easily remembered, easily recognized,
easily optimized (if Arthur ever cared ...) characters. If you care
about worst case, you can easily code the standard Lisp/Haskell
solution just as you would in those languages. See [0] for more.

The underlying computational model fits sequential, parallel, SIMD,
and almost every other paradigm much better than all the popular
programming languages. Unfortunately, there's a learning curve that
puts of most people (and is perhaps insurmountable to some people who
have no problem with Python, Java, C or PHP) - it's much more
Math-oriented.
** related langs
- https://codeberg.org/anaseto/goal
- https://ktye.github.io/kweb/compile.html
** Tutorials
The shape of tutorials of K looks like... Super minimalistic.
- https://kparc.com/
- http://vrabi.web.elte.hu/k/kbyeg.k
- https://github.com/kevinlawler/kona/wiki/Idioms
- https://xpqz.github.io/kbook/Introduction.html
- https://github.com/razetime/ngn-k-tutorial/
- https://github.com/JohnEarnest/ok/blob/gh-pages/docs/Manual.md
- https://github.com/JohnEarnest/ok/blob/gh-pages/docs/Programming.md
- http://www.nsl.com/k/k2/k295/kreflite.pdf
- http://www.nsl.com/k/k2/k295/kusrlite.pdf
- http://www.nsl.com/papers/style.pdf
- https://github.com/Dyalog/ride/blob/master/docs/coding-style.txt
- Q for Mortals: https://code.kx.com/q4m3/
- http://www.nsl.com/
- http://archive.vector.org.uk/art10010830
- https://web.archive.org/web/20070519112242/http://www.kuro5hin.org/story/2002/11/14/22741/791
- https://nsl.com/k/training/idioms_K3.pdf
- https://nsl.com/k/training/
- https://web.archive.org/web/20071230205056/http://kx.com/technical/contribs/eugene/kidioms.html
- https://gist.github.com/chrispsn/b1020918a83a28ab8b4442d8aff8d1b4 <- K mezzaine
- https://github.com/kparc/kcc
- https://cs.nyu.edu/~shasha/papers/tutorial
- https://ngn.codeberg.page/txt/tacitjk.pdf
- https://github.com/gitonthescene/ngnk-libs/
- https://codegolf.stackexchange.com/questions/50657/tips-for-golfing-in-k
- https://secwang.github.io/ngnkcart/
- https://vector.org.uk/conquering-recursion/
- https://vector.org.uk/a-graphical-sandbox-for-k-2/
- https://clojureverse.org/t/data-modelling-with-vectors/9826
- https://beyondloom.com/tools/specialk.html

- https://docs.google.com/document/u/1/d/1W83ME5JecI2hd5hAUqQ1BVF32wtCel8zxb7WPq-D4f8/mobilebasic b analysis

- shift-reduce parser:
  https://ato.pxeger.com/run?1=fZRPk5owGMYvPfEp3mJnSTSrYi-doOtedo86E5kdd61aimCZanAQKax_vkgve9kv1U_TF6hbUdocQnie3_skhEl-vn6fyrl8eXndhO71p1_vPJMTVQyKTQyE6EELfAmbtSfn4EnpBLBw3BACb_4tBHezWKgKAKhClNXqMPPWoSft8EiJ0hkY-MEbIcpypP83okAcI6z1iS8uA2x_I3HBXrAOYWFht94sYelJWFoxWNEcIiuAmRPB0pmdJomLmXYFW5zbV0VbnNkdaMMNHDpwaMMhG7Q7cNM5KxLFohpcnwOiAFShcQGIU2ByaYuT3enCoQQQJ__RCp0yQrzN4MRhYNlhKSRy6CN4Lnx1wh-OI3PuvqSl0xm5Pbhswx40gfyvugX0X9WPT1itUkXp8S3RpxAbiRGPWHPMnuleGRzFXEqMVBQoxgbKiUFYkhk7WXmmjEgejZAZ0ymk4H0GplIyTulUe8q0fPzIt1-cILhV0_Oj7pXh8T07SigoJt_qU41cxR0VVEyNOT5ZvNdMpc_RMY0HTupVTrU-CuRan6LYp4zdccYQxYA61zRzZDTHiif59jBJujEG27gME-o7f6XFo_cttGkd0PBXaFT6dEJiPNsN3qddHfGIbz-MSCWhbckfwF_dVmMjX2pkLRxpO6ohx3tQ8BOYphG15uqqobq1rNdruL9DTpg2ZJ_5HcWOMHwwQhW7oQ3zG-fPxXO8gH4D

- boolean reductions
  http://archive.vector.org.uk/art10501140
** oK vs ngn

from oK to ngn/k: the differences
 float parsing
  * a digit must be present immediately before the "." (".1" throws 'typ)
 symbol parsing
  * symbols defined using inline notation (`abc) must be alphanumeric (no "."'s)
  * use `"..." to escape (vs. `$"...")
 strand notation
  * numeric literals must be separated with exactly one space (vs. any amount)
  * symbols must be directly adjacent
 boolean notation
  * not present ("10010b" throws 'val)
 dictionary notation
  * not present ([a:34;b:"feed me"] is instead a block of expressions
 o (function self reference)
  * cannot be used infix ("{$[x;(x-1)o(y,2**|y);y]}[3;2]" throws 'typ)
verbs:
 +x (flip)
  x must "conform"; each item of x must be the same length, or be an atom

 x+y (add)
 x-y (subtract)
 x*y (multiply)
  integer null (0N) is equivalent to -9223372036854775808 (integer nulls/infinities are not "sticky")

 *x (first)
  *emptyList returns "" for (), and appropriate nulls for other empty lists (0N, 0n, " ", etc.)

 x!y (dict)
  x can (also) be any non-integer atom, b (also) any atom (both do not have to be conforming lists)

 &x (where)
  x can be a nested list, functioning as "deep-where"
  &() returns ,!0 instead of ()

 <x (ascend)
  <i is "open [file-descriptor]"

 >x (descend)
  >i is "close [file-descriptor]" (note: >1 will exit the repl)

 ^x (null)
  " " is also considered null

 x^y (fill)
  x must be an atom; nulls in y are replaced with x (replaces overload equivalent to (!x)^y)

 i#y (take)
  0N#x is a no-op, returning x unchanged

 f#y (replicate)
 f_y (weed out)
  f is applied to the whole of y, not to each individual item of y
  f#dict and f_dict only returns values (not keys!values)

 _sym (lowercase)
  returns a lower-cased version of the symbol (_`ABC => `abc)

 $x (string)
  strings are converted into a list of strings, each consisting of a single character (versus remaining unchanged)

 x$y (cast)
  uses `d instead of `f, no support for `b

 `I$y (int)
  parses string as an integer

 x?y (find)
  rank-sensitive find ("abc";"def")?"def" returns 1, not 0N 0N 0N

 i?c (random alphabet)
  i?"A" returns i random uppercase letters from A-Z
  any other character returns i random lowercase letters from a-z

 @x (type)
  uses symbol types; uppercase for lists and lowercase for atoms (vs. positive/negative integers, respectively)

 x@y (apply)
  indexing out of bounds returns "prototype" of x, not just 0N (either a null of the appopriate type, or a list containing a number of nulls equal to the length of the first item in y)

 .x (value)
  can be applied to (simple/flat) parse trees, e.g. `3~.(#:;"abc")`
  can't be applied to get bound environment of a function

 ?[x;y;z] (splice)
  insert with ?[;loneIndex;], not ?[;(index;index);]
  splice uses ?[orig; (startIndex; length); value], not ?[orig; (startIndex; endIndex); value]
  splice cannot take a monadic function instead of a value
verb-y adverbs:
 C\C (split)
 C/C (join)
  left arg can be string (not just character)

 i\I (encode)
  left arg can be atom; automatically expanded to cover all of right arg

 i'x (window)
  uses i'x instead of i':x; negative i's handled differently

 i f':x (stencil)
  MISSING - applies monadic f to overlapping windows of x of length i


misc:
 no keyword builtins, i.e. sin, cos, exp, log, prm, in
  has destructuring (a;b):("abc";2)
  has : (right), e.g. "d" ~ :/"abcd"
** AoC
- /
2,2,2
1,2,2
3,2,2
2,1,2
\

data:{x:0:`argv 1; 1_(x?,"\\")#x}[]
- https://codeberg.org/CptJimKirk/aok
- https://github.com/qbists/studyq/tree/main/aoc/2022
- https://k.miraheze.org/wiki/Advent_of_Code
** aoc23
- https://github.com/chrispsn/aoc2023/blob/main/answers.k
- https://github.com/rak1507/aoc-2023/tree/main
- https://copy.sh/k/aoc23/
-

** day 9
https://ngn.codeberg.page/k/#eJyVkU1PwzAMQO/+FaYg2iwrTjo+RBCiBy6TOCFxmidaJCoqTRStlegE7LdjSqUlu+2SOI6fHL8Q9k5zbKZxoqeUOr7NVM4uun98eojuJnFSzE+y51gdGxfVZK4jIKzcV6/byXazbV1qv+3pJnX9DyNVzWrVfEKimRY3R9YscxVbNJghvTTdG36U664FKMCiRrmXSC+sGUolGnaUdDLGyotz9V9PO4B8gnyEQoZ3DPsM+wwHjJwHSl5v5f0zPMcLvMSrpUISGOvudV12dfPeYlOhZqBh6gMJOqQHneHAHNYFihL2aiW9jyOAwJKf/S1iAGAcZ9QWuOZANoe2mWGca/ylQDkFzsmX/gtazJAc
** Snippets and wtfs
- day 8 aoc 22
  #+begin_src k
x:0:"i/08"
mv:(-1>':|\)'(+|:)\x
+//|/((!4) (|+:)/'mv)

  #+end_src
- scan or n-dos?
    #+begin_src k
1+:\3 3#!9 \ this is a n-dos
\ Why does the same as
+:\3 3#!9 \ if this is a scan, it should pick rows, not the full table
   #+end_src
- amend fail in ngn/k?
  - https://k.miraheze.org/wiki/Amend
  - https://github.com/kevinlawler/kona/wiki/Amend it works in kona.
  -
    #+begin_src k
  b:2 3#!6
  b+: b  \ Works fine (dyadic),
  .[`b;();+:] \ works fine (monadic)
  b+:  \ That should amend using monadic, but fails in ok and ngn. works in kona
    #+end_src
  - (f;g)@'lst
#+begin_src k
f:1+
g:2+
r:0 1
(x1;x2):r
(f x1; g x2)
(f;g)@r  \ (+1;+2)
(f;g)@'r  \ why?
#+end_src
  -  { \(x;y);x>y}':-5 5 4 8  . \ does print partial results?
#+begin_src k
 { \(x;y);x>y}':-5 5 4 8
-5 0N
5 -5
4 5
8 4
1 1 0 1
#+end_src
  - sort by frequency desc
#+begin_src k
d:(!=s)!(#'.=s)
&(>d)!(d[>d])
/ or
&#'([>#'=s]#=s)
/ or
#:'=s
/
sd:#:'=s
&([>sd]#sd)
/ or
&([>d]#d:#'=s)
#+end_src
or
#+begin_src k
d:#'=s
&(>d)#d
#+end_src

- tacit k hook
  #+begin_src k
    f/1 g\
  #+end_src

- tacit k fork
  #+begin_src k
    g/(f;h)@\:
  #+end_src

- fractals
  https://ngn.codeberg.page/k/#eJyFkd2OmzAQhe95ioloY4Od+AdCkVFWeYK+QBJ1CZAtKmsiIJFTSJ69k1ysqlZVfXE0c/GdOTMuuosZx+XWZVf+MzOZ2t/Elio2CeICX+6X4BZmjs1tw3YERHHuLhXkPdDS9Vl57QNYvMChbRt4z4eudt6ha8zIBTmnhCipY8mYIER+Be0LgyVWse9C6qM/9UNUQhWkmQaVZDFEOktiUDoNbiB+832O6fK6aSrvnJrxtfhEpZOykJU8ym2x54X/oBiVPInZvDCKYQ9axikkq1WU4EI7h6bn4ZhCZYu2rLyjeZUGE29AlHV/avKr5x039/VuN8cU/3uir6vuVNv+Rw2YMbdvGO64CUUoDBHa53e1nsV+9C+8yO3QdlCe+wGxoruAUqPjZCLTQoEK3U3M9N9Y2eVvrYXnVyCXjExTxym/zx7n5JMhgUBU/cmdqty2H9hqPHCivuGwg+GCTsxxmfEcBRPkBs1c8DAR3+vmUHXDB2hHOtHU18EuksFGCxYRIznSt51dz3RoTfQMLbpzU0USCfVifYZHwYsoTekUhQu5XAHKF0ZnNvhsjfaTOGAjXQgXukyHAodvAiFBvOe2rJpD1w7QV4Pn/QKIkrFl
  #+begin_src k
    crv:{{.[x;y,z;:;1]}/[(1+|/'x)#0]. x-:&/'x}@+\' /curve as (dxs;dys) -> bool matrix
brl:{,/'u8''10240++/''0N 2#/:+/'0N 4#x*(#x)#(#*x)#'(1 8;2 16;4 32;64 128)} /bool matrix -> braille
u8:{`c$(0x00c0e0f0[c],c#128)+(0,64+&c:1+128 2048 65536'x)\x} /utf8 encode
f:`0:brl@ /display

f@~=\\&64                                 /sierpinski triangle
f@*/*/:'/2#,~1=!4#3                       /cantor dust
f@crv 11{x,'|'|-1 1*x}/!2                 /dragon curve
f@6{+2(x,(,~!#*x),|:')/x}/1               /peano curve
f@5{b,'1_'|'b:,/(|+x,0;,a,0;x,'a:~!#x)}/1 /hilbert curve
f@n{(|(8#2)\30)@2/+3':0,x,0}\n=!2*n:32    /rule30
f@1>n#+/*/2#,12((|3*-0.5 -0.7+(!n)%n:2#64)+{(-/x*x;2*/x)}@)/0 /mandelbrot set


  #+end_src
-   https://cs.nyu.edu/~shasha/papers/tutorial
  8) There is each left each right (which should be interpreted
as performing an each left on successive elements of the right array):

 1 2 3 4 +\:/: 10 20 30 40 50
(11 12 13 14;21 22 23 24;31 32 33 34;41 42 43 44;51 52 53 54)

Eachright eachleft considers each element of the left array one at a time
and applies
+/: to the that element and the right array

  1 2 3 4 +/:\: 10 20 30 40 50
(11 21 31 41 51;12 22 32 42 52;13 23 33 43 53;14 24 34 44 54)


9) This also applies to binary verbs.
Examples:

g:{[a;b] a + (7 * b)}

g[2;3]
23

Eachleft considers each element of the left array one at a time and applies
g to that element and to the entire right array.

1 2 3 4 g\: 10 20
(71 141;72 142;73 143;74 144)

Eachright considers each element of the right array one at a time and applies
g to the left array and that element.

1 2 3 4 g/: 10 20
  (71 72 73 74;141 142 143 144)

Eachleft eachright considers each element of the right array one at a time
and applies
g\: to the left array and that element.

1 2 3 4 g\:/: 10 20
  (71 72 73 74;141 142 143 144)

(Try for example 1 2 3 4 g\: 20)

Eachright eachleft considers each element of the left array one at a time
and applies
g/: to the that element and the right array

1 2 3 4 g/:\: 10 20
  (71 141;72 142;73 143;74 144)

(Try for example 3 g/: 10 20)

Finally, each can apply to just one argument

 x1: 1 2 3 4
 x2: 50

 g[;x2]'x1
351 352 353 354

 g[x1]'x2
351 352 353 354


#+begin_src k

/{x^'``fizz`buzz`fizzbuzz@2/~3 5!\:x}1+!15

:x:1+!15  / sequence 1..n

/3 5!\:x /

1 2 +\:x

Explore with:
/{x^``fizz`buzz`fizzbuzz@2/0=3 5{x!y}\:x}'!20
/{x^'``fizz`buzz`fizzbuzz@2/0=3 5{x!y}\:x}!20
/{x,'``fizz`buzz`fizzbuzz@2/0=3 5{x!y}\:x}!20



+\x      / assume 0 in as the initial base

0+\x     / same as this

1 +\x    / this, increment one

(#x)#1 +\x / is the same as this

1 2 3 +\x


{x^'``fizz`buzz`fizzbuzz@2/~3 5!\:x}x
#+end_src

- 22/08.k
#+begin_src k
/(-1>':|\)'(+|:)\3 3#50?50
m:3 3#50?50
r:(+|:)
(-1>':|\)'r\m
(!4) (|+:)/'mv
#+end_src

- find substring
{1<#x\y}
** Problems
*** all equal
We can solve "all equal" with =?=, but if we didn't have it

- 7 day moving avg
I'd do 7{+/x%#x}':!9. I feel it directly says "7-day moving average", whereas
{+/x%#x}'7'!9 says "the average of each 7-day window", and (7+/':!9)%7 says "one
seventh of the 7-day moving sum" and is errorprone because you have to make sure
the two sevens are equal to each other.
But (7+/':!9)%7 is prettier. Above I'm just talking about which version I'd keep
in my program, for clarity.

- "in"
if anyone needs a fast "in" for ngn/k, sorting and binary-searching can be
faster than a plain "find": in:{x@:<x;y=x@x'y} // y∊x

ae:{1=&/(*x)=x}
*** nesting level and back
ff:(,/(<;>)@\:)
0ff':+\-/"{}"=\:"o{joe{ahools}}"

*** pick multiple rows and multiple columns
(3 3#!9)[0 1;2 0]

*** over with seed of length 2
  10 10 +\!#x . The shape is like it is because it does `10 10 + 0` +
** Trees and parsers
   - https://github.com/gitonthescene/k-night
   - http://nsl.com/papers/continuations.htm
   - http://nsl.com/papers/ck.htm
   - http://nsl.com/k/tableaux/trees.k
   - https://github.com/nineties/planckforth
   - https://github.com/KxSystems/kdb/blob/master/tree.q
   - http://archive.vector.org.uk/art10500340
   - https://github.com/tlack/atree
   - https://github.com/chrispsn/ngn-k-unparser
*** tired: not enough sleep->wired too much coffee
    https://ngn.codeberg.page/k/#eJwljs1qwzAQhO/7FMuSIsmyK8tJfNj0UQxucZUfiKVSK5GKcZ+9gl4+ZhiGmRQ9d72xuqEPasDHxOv7tCtG27Hrh6yt7g6V/M1vShbZV8q0G8DCFG/f7pPRh4jOh8flisvduS8Cx5T+sxgCzo/pilM4n50jgPTkFL0QsjaENAjiQiXkcnKqrM+8ju3rUWdtWLZoscP9y15VA/80eTPpCaVlxCprWWVVE5Oq7Zg3UY6LghngDxN7OTg=
* BQN
  - https://miguelraz.github.io/blog/fromjuliatobqn/index.html
* Klong
- https://t3x.org/klong/
- https://github.com/briangu/klongpy
